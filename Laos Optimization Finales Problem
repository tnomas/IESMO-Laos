#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 13 17:52:14 2017
@author: nilshoffmann
"""

from pyomo.environ import ConcreteModel, Param, Var, Set, Constraint, Objective
from pyomo.environ import minimize, NonNegativeReals
from pyomo.opt import SolverFactory
import pandas as pd
import numpy as np

#==============================================================================
# --------Initialize-----------
#==============================================================================
data = pd.read_csv('data.csv', header=0, index_col = 0, nrows=24)
model = ConcreteModel()
model.T = [i for i in data.index]

#==============================================================================
# ------------Variables------------
#==============================================================================
#Wind
CostWind = 1000000 #€/MW
LifetimeWind = 20 #a
FactorWind = [0]+[(data.loc[i,'windfactor']*8760) for i in model.T]  #Wind Factor @ hour X

#PV
CostPv = 10000 #€/MWp
LifetimePv= 30 #a
FactorPv = [0]+[(data.loc[i,'pv_factor']*8760) for i in model.T]  #Radiation Factor @ hour X

#Dam
global StorageVariable
StorageSize = 1000000
StorageVariable = [StorageSize for i in range(0,len(model.T)+1)] #m^3 in Storage, hourly correction
Pdam = 100 #MW
FactorDam = 10000 #m^3 Water per MW
InflowRain = 2 #m^3 @ hour X
InflowRiver = 1 #m^3 @ hour X
Cdam = 100 #€/MWh

#Demand
DemandFactor_Energy = data['demand']
DemandTotal_Energy = 71737.392 #MWh Total
DemandFactor_Water = data['riverflow_normed']
DemandTotal_Water = 100000000 #m^3 Total

#==============================================================================
# ------------Calculation------------
#==============================================================================
#Costcalculation
Cwind = CostWind/LifetimeWind #€/MW Wind, 1 year only
Cpv = CostPv/LifetimePv #€/MW PV, 1 year only
DemandEnergy = [0]+[(DemandTotal_Energy * DemandFactor_Energy[i]) for i in data.index]
DemandWater = [0]+[(DemandTotal_Water * DemandFactor_Water[i]) for i in data.index]

#==============================================================================
# ------------MODEL CONSTRUCTION------------
#==============================================================================
#Parameter
model.Cwind = Param(initialize=Cwind) #Price per MW Wind
model.Cpv = Param(initialize=Cpv) #Price per MW PV
model.Cdam = Param(initialize=Cdam) #Price of Water €/MWh
model.Pdam = Param(initialize=Pdam) #Maximum Turbine Generation Capacity

#Variablen
model.Pwind = Var(domain=NonNegativeReals) #installed MW Wind
model.Ppv = Var(domain=NonNegativeReals) #installed MW Wind
model.PowerGeneratingWater = Var(model.T, domain=NonNegativeReals) #used M^3 Water @ hour X

#==============================================================================
# ----------Constraint & Objective & Solver------------
#==============================================================================
#------Objective Function-------
#€/MW * MW + €/MW + m^3(gesamt) * MWh/m^3 * €/MWh
def obj_rule(model):
        return(model.Cwind * model.Pwind + model.Cpv * model.Ppv + sum(model.PowerGeneratingWater[i] for i in model.T)/FactorDam * Cdam)
    
model.cost = Objective(sense=minimize, rule=obj_rule)
    
#----CONSTRAINTS-------
#Power of Wind * WindFactor + PV * PVFactor + WaterusedforElectricity @ hour X * Generationfactor must be bigger than Energy Demand
def DemandEnergy_rule(model, i):
    return (model.Pwind * FactorWind[i] + model.Ppv * FactorPv[i] + model.PowerGeneratingWater[i]/FactorDam >= DemandEnergy[i])

model.EnergyDemand = Constraint(model.T, rule=DemandEnergy_rule)


#Limitation through Water Turbine
def MaxWaterPower_rule(model, i):
    return(model.PowerGeneratingWater[i]/FactorDam <= Pdam)

model.MaxWaterPower = Constraint(model.T, rule=MaxWaterPower_rule)

#for i in model.T:
#    StorageVariable[i] = StorageVariable[i-1]  InflowRain - InflowRiver
    
#Storage
def WaterUsage_rule (model, i):
    return(model.PowerGeneratingWater[i] <= StorageVariable[i] + sum(InflowRain for i in range(1,i)) + sum(InflowRiver for i in range(1,i)) - sum(model.PowerGeneratingWater[i] for i in range(1,i)))

model.WaterDemand = Constraint(model.T, rule=WaterUsage_rule)

#------SOLVER---------
opt = SolverFactory('glpk')
model.write('optimization_problem.lp',
         io_options={'symbolic_solver_labels': True})
results = opt.solve(model, tee=True)

#==============================================================================
# ------------Results------------
#==============================================================================
Hour = []; WindOutput = []
EnergyDemand = []; WaterDemand = []
PVOutput = []; DamOutput = []
GenerationWaterUsed = []; Variable = []
for i in model.T:
    Hour.append(i)
    WindOutput.append(round(FactorWind[i]*model.Pwind.value,2))
    PVOutput.append(round(FactorPv[i]*model.Ppv.value,2))
    DamOutput.append(round(model.PowerGeneratingWater[i].value/FactorDam,2))
    GenerationWaterUsed.append(round(model.PowerGeneratingWater[i].value,2))
    Variable.append(round((StorageVariable[i] + sum(InflowRain for i in range(1,i)) + sum(InflowRiver for i in range(1,i)) - sum(model.PowerGeneratingWater[i].value for i in range(1,i))),2))

Results = pd.DataFrame({"Hour": pd.Series(Hour), 
                        "Energy Demand": pd.Series(DemandEnergy[1:]),
                        "Water Demand": pd.Series(DemandWater[1:]),
                        "Wind Output": pd.Series(WindOutput),
                        "PV Output": pd.Series(PVOutput),
                        "Dam Output": pd.Series(DamOutput),
                        "Turbine Water": pd.Series(GenerationWaterUsed),
                        "Factor Wind": pd.Series(FactorWind[1:]),
                        "Factor PV": pd.Series(FactorPv[1:]),
                        "Storage": pd.Series(Variable[1:])},
                        columns=['Hour','Energy Demand','Water Demand','Wind Output','PV Output','Dam Output','Turbine Water','Factor Wind','Factor PV','Storage'])
Results.index = Results.index + 1   

#==============================================================================
# ------------OUTPUT------------
#==============================================================================
InstalledWind = round(model.Pwind.value,2)
InstalledPV = round(model.Ppv.value, 2)
print("\n----INSTALLED---- \n"
      "Dam Capacity:", Pdam, "MW \n"
      "Wind installiert:", InstalledWind, "MWh \n"
      "PV installiert:", InstalledPV, "MWh  \n"
      "Gesamt benötigtes Wasser:", round(sum(model.PowerGeneratingWater[i].value for i in model.T),2), "m^3 \n\n"
      "----COST---- \n"
      "Wind:", "{:0,.2f}".format(model.Cwind * InstalledWind), "€ total |", Cwind, "€ per MW installed \n"
      "PV:", "{:0,.2f}".format(model.Cpv * InstalledPV), "€ total |", Cpv, "€ per MW installed \n"
      "Dam", "{:0,.2f}".format(sum((model.PowerGeneratingWater[i].value for i in model.T)) * Pdam * Cdam), "€ total |", Cdam, "€ per MWh used\n"
      "Total:", "{:0,.2f}".format((model.Cwind * InstalledWind + model.Cpv * InstalledPV + sum((model.PowerGeneratingWater[i].value for i in model.T)) * Pdam * Cdam)), "€ \n")
print(Results)